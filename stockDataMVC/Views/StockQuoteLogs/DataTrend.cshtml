@model stockDataMVC.Controllers.StockQuoteLogsController.StDataModel  

<div class="row">
    <div class="col-sm-12">
        

<script>
    var pvObj
    @{
        //a couple of things are going on here. In Razor, I am building strings of coordinates for and SVG path.
        //in javascript, I am taking all of the values and pasing it to TrendMenuAS.js to create an object that holds all the data
        Dictionary<int, string> penSVGStrDict = new Dictionary<int, string>();
                //class penData

        int x = 0;
        int cLength = 500;
        int cHeight = 250;
        bool muliplePens = false;
        float xPos, yPos;
        float pMin = 0;
        float pMax = 0;
        float minPercentOffset = 0;
        bool firstPass = true;
        @:var pvObj;
                @:var pvAr = [];

        @:var tickerIndex =0;
                if (Model.stockPenDataDict.Count > 1){
            muliplePens = true;

            //get the largest Max value and smallest Min values of all pens
            foreach (var item in Model.stockPenDataDict)
            {
                if (firstPass)
                {
                    pMax = item.Value.maxValue;
                    pMin = item.Value.minValue;
                    firstPass = false;
                }
                else
                {
                    if (pMax < item.Value.maxValue)
                    {
                        pMax = item.Value.maxValue;
                    }
                    if (pMin > item.Value.minValue)
                    {
                        pMin = item.Value.minValue;
                    }
                }
            }
            if (pMin < 0)
            {
                minPercentOffset = pMin * -1;
            }

        }
        firstPass = true;
        foreach (var item in Model.stockPenDataDict) {
            //item.Value.stockDataList
            @:pvAr = [];
                    //get index to javascript ticker object
            @:tickerIndex = getTickerIndexFromID(@Html.DisplayFor(p => item.Key));


            if (!muliplePens){

                pMax = item.Value.maxValue;
                pMin = item.Value.minValue;
            }
            if (firstPass)
            {
                float range = pMax - pMin;
                pMin = pMin - (float)(range * 0.15);
                pMax = pMax + (float)(range * 0.15);
                firstPass = false;
                @:tickerList[tickerIndex].clearLoggedData();
            }

            //}
            @:if (tickerIndex >= 0){
                                @:tickerList[tickerIndex].setTickerMinMax(@Html.DisplayFor(p => pMin),@Html.DisplayFor(p => pMax));
                            @:}
                    for (int i = 0; i < item.Value.stockDataList.Count; i++)
            {
                float chartPoint = item.Value.stockDataList[i].price;
                float chartMin = pMin;
                float chartMax = pMax;

                if (muliplePens) {
                    chartPoint = item.Value.stockDataList[i].percent+minPercentOffset;
                    chartMin = pMin + minPercentOffset;
                    chartMax = pMax + minPercentOffset;
                }
                yPos = cHeight - (chartPoint - chartMin) / (chartMax - chartMin) * cHeight;
                xPos = i * cLength / Model.slices + 40; //40 is the offset in pixels from beginning of y axis

                if (penSVGStrDict.ContainsKey(item.Key))
                {
                    penSVGStrDict[item.Key] += " L" + xPos.ToString() + " " + yPos;
                }
                else// key not found start new entry
                {
                    string str = "M";
                    str += xPos.ToString() + " " + yPos;
                    penSVGStrDict.Add(item.Key, str);
                }
                @:pvObj = new PenValueObj(@Html.DisplayFor(p => item.Value.stockDataList[i].price),@Html.DisplayFor(pc => item.Value.stockDataList[i].percent),@Html.DisplayFor(v => item.Value.stockDataList[i].volume), '@Html.DisplayFor(t => item.Value.stockDataList[i].timestamp)', '@Html.DisplayFor(n => item.Value.tickerName)');
                        @:if (tickerIndex >= 0){
                                    @:tickerList[tickerIndex].pushLoggedData(pvObj);
                                @:}
                    }

        }

    }
</script>
        <div ng-controller="testController" ng-init="init(500,250,40,@Html.DisplayFor(sl => Model.slices),@Html.DisplayFor(m => pMax),@Html.DisplayFor(len => pMin))">

            <svg height="@Html.DisplayFor(len => cHeight)" width="@Html.DisplayFor(len => cLength)" ng-mousemove="onMouseMove($event)" ng->
                <rect x="40" ng-attr-y="{{zeroYPos}}" width="@Html.DisplayFor(len => cLength)" height="500" style="fill:rgba(185,191,206,0.5);stroke-width:0;stroke:rgb(0,0,0);" />
                <path d="M40 0 L40 @Html.DisplayFor(len => cHeight) L @Html.DisplayFor(len => cLength) @Html.DisplayFor(len => cHeight)" style="stroke:black; fill:none; stroke-width:2" />

                @{
                    List<string> penColors = new List<string> { "#4251A3", "#CA407C", "#68912E", "#AB7F10", "#2AB78D"};
                    x = 0;
                }
                
                @foreach (var item in penSVGStrDict)
                {
                    //string maxDisp = (Model.stockPenDataDict[item.Key].maxValue + Model.stockPenDataDict[item.Key].maxValue * (float)0.01).ToString("0.0");
                    // string minDisp = (Model.stockPenDataDict[item.Key].minValue - Model.stockPenDataDict[item.Key].maxValue * (float)0.01).ToString("0.0");

                    @:<path d="@Html.DisplayFor(modelItem => item.Value)" style="stroke:@Html.DisplayFor(colorItem => penColors[x]); fill:none; stroke-width:2" />
                    @:<circle ng-attr-cx="{{rulerData.x-2}}" ng-attr-cy="{{rulerData.penCoords[@Html.DisplayFor(colorItem => x)].y}}" r="3" stroke="black" stroke-width="1" fill="@Html.DisplayFor(colorItem => penColors[x])" />
                    x++;
                }
                @{
                    string maxDisp = pMax.ToString("0.0");
                    string minDisp = pMin.ToString("0.0");
                    if (muliplePens)
                    {
                        maxDisp += "%";
                        minDisp += "%";
                    }
                }
                <text x="0" y="15" fill="black" font-size="12">@Html.DisplayFor(modelItem => maxDisp)</text>
                <text x="0" y="@Html.DisplayFor(len => cHeight)" fill="black" font-size="12">@Html.DisplayFor(modelItem => minDisp)</text>
                <line ng-attr-x1="{{rulerData.x-1.5}}" y1="0" ng-attr-x2="{{rulerData.x-1.5}}" y2="@Html.DisplayFor(len => cHeight)" style="stroke:rgb(0,0,0);stroke-width:1" stroke-dasharray="5,5" />

                Sorry, your browser does not support inline SVG.
            </svg>
            <br />
            <table class="table table-striped table-condensed table-hover">
                <thead>
                    <tr><th>Ticker</th><th>TimeStamp</th><th>Price</th></tr>
                </thead>
                <tbody>
                    <tr ng-repeat="item in rulerData.penCoords">
                        <td>{{item.name}}</td>
                        <td>{{item.timeStamp}}</td>
                        <td>{{item.price| currency}}</td>
                    </tr>
                </tbody>
            </table>

        </div>



            @foreach (var item in penSVGStrDict)
            {

                //@Html.DisplayFor(modelItem => item.Value)@:" style="stroke:black; fill:none; stroke-width:2" />
            }
<!--<table id="searchTextResults">
    <tr>
        <th>time</th>
        
        @foreach (var item in Model.stockPenDataDict)
        {
            
            @:<th>@Html.DisplayFor(modelItem => item.Value.tickerName)</th>
                    
            @:</tr>
            for (int i = 0; i < item.Value.stockDataList.Count; i++)
                {
                @:<tr>
                    @:<td>@Html.DisplayFor(modelItem => i)</td>
                    @:<td>@Html.DisplayFor(modelItem => item.Value.stockDataList[i].timestamp)</td>
                    @:<td>@Html.DisplayFor(modelItem => item.Value.stockDataList[i].price)</td>
  

                @:</tr>
                }
        }
        </table>-->



        </div>
    </div>

 

        